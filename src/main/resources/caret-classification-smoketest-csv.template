withTimeout(timeout=<<<TIMEOUT>>>, onTimeout="error", expr={
    with_parameters_test_that("<<<NAME>>>", test_name=paramGrid, test_params=paramGrid, code={
        for (iter in 1:<<<ITERATIONS>>>){
            set.seed(42)
            testdata <- read.arff(paste0("smokedata/<<<NAME>>>_",iter,"_test.arff"))
            traindata <- read.arff(paste0("smokedata/<<<NAME>>>_",iter,"_training.arff"))
            target_index <- ncol(traindata)
            train_x <- traindata[,-target_index]
            train_y <- traindata[,target_index]
            test_x  <- testdata[,-target_index]
            test_y  <- testdata[,target_index]

            paramSplit <- strsplit(test_params, ": ")
            paramNames <- unlist(strsplit(paramSplit[[1]][1], ","))
            paramSet <- read.table(text=paramSplit[[1]][2], sep=",")
            colnames(paramSet) <- paramNames

            control <- trainControl(method = "none")
            model <- caret::train(x = train_x,
                           y = train_y,
                           method = "<<<CLASSIFIER>>>",
                           tuneGrid = paramSet,
                           trControl = control
                           <<<RPARAMS>>>)
            predictions <- predict(model, test_x)
            probabilities <- array(-1,dim = c(length(test_y),2))
            tryCatch(
                expr = {
                    if (any(is.na(predict(model, test_x, type = "prob")))){
                        stop("At least one of the predicted probability values is NaN.")
                    }
                    probabilities <- predict(model, test_x, type = "prob")
                },
                error = function(e){
                    message("The prediction of the probabilities failed. Values set to default (-1).")
                }
            )
            actual_classes <- as.integer(test_y) - 1
            pred_classes <- as.integer(predictions) - 1
            csv_df <- cbind(actual = actual_classes,
                          prediction = pred_classes,
                          prob_0 = probabilities[,1],
                          prob_1 = probabilities[,2])
            csv_file <- file.path(dirname(dirname(getwd())),"predictions",paste0("pred_<<<IDENTIFIER>>>_<<<NAME>>>_",iter,".csv"))
            write.csv(x = csv_df,
                    file = csv_file,
                    row.names = FALSE)
            print(paste0("Predictions saved at: ", csv_file))

            # training data as test data
            predictions_training_as_test <- predict(model, train_x)
            probabilities_training_as_test <- array(-1,dim = c(length(train_y),2))
            tryCatch(
                expr = {
                    if (any(is.na(predict(model, train_x, type = "prob")))){
                        stop("At least one of the predicted probability values is NaN.")
                    }
                    probabilities_training_as_test <- predict(model, train_x, type = "prob")
                },
                error = function(e){
                    message("The prediction of the probabilities failed. Values set to default (-1).")
                }
            )
            actual_classes_training_as_test <- as.integer(train_y) - 1
            pred_classes_training_as_test <- as.integer(predictions_training_as_test) - 1
            csv_df <- cbind(actual = actual_classes_training_as_test,
                          prediction = pred_classes_training_as_test,
                          prob_0 = probabilities_training_as_test[,1],
                          prob_1 = probabilities_training_as_test[,2])
            csv_file <- file.path(dirname(dirname(getwd())),"predictions",paste0("pred_<<<IDENTIFIER>>>_<<<NAME>>>_TrainingAsTest_",iter,".csv"))
            write.csv(x = csv_df,
                    file = csv_file,
                    row.names = FALSE)
            print(paste0("Predictions saved at: ", csv_file))
        }
    expect_true(TRUE)
    })
})

