    @Test(timeout=<<<TIMEOUT>>>)
    public void test_<<<NAME>>>() throws Exception {
        for(int iter=1; iter<=<<<ITERATIONS>>>; iter++) {
        	<<<MYSQLEVALSMOKE_START>>>Dataset<Row> dataframe = arffToDataset("/smokedata/<<<NAME>>>_" + iter + "_training.arff");
            Dataset<Row> testdata = arffToDataset("/smokedata/<<<NAME>>>_" + iter + "_test.arff");

            <<<CLASSIFIER>>> classifier = new <<<CLASSIFIER>>>();
            classifier.setLabelCol("classAtt");
            try {
            	Method setSeedMethod = classifier.getClass().getMethod("setSeed", long.class);
            	setSeedMethod.invoke(classifier, 42);
            } catch (NoSuchMethodException | SecurityException e) {
            	// not randomized
            }
            setParameters(classifier, parameters);

            ClassificationModel<?, ?> model = classifier.fit(dataframe);
            Dataset<Row> pred = model.transform(testdata);<<<MYSQLEVALSMOKE_END>>>
            Dataset<Row> predSelect = pred.select("classAtt", "prediction");
            try {
                predSelect = pred.select("classAtt", "prediction", "probability");
            } catch (Exception e) {
                predSelect = predSelect.withColumn("prob_0", functions.lit(-1));
                predSelect = predSelect.withColumn("prob_1", functions.lit(-1));
                System.out.print('The prediction of the probabilities failed. Values set to default (-1).');
            }
            // create a csv file
            String filePath = "predictions/pred_<<<IDENTIFIER>>>_<<<NAME>>>_" + iter + ".csv";
            try {
                File outFile = new File(filePath);
                outFile.createNewFile();
            } catch (IOException e) {
                System.out.println( "Creating the csv file failed." );
                e.printStackTrace();
            }
            // write in csv
            try {
                FileWriter outWriter = new FileWriter(filePath);
                // write header
                outWriter.write("actual,prediction,prob_0,prob_1\\n");
                // write predictions
                List<String> predString = predSelect.map((MapFunction<Row, String>) row -> row.mkString(","), Encoders.STRING()).collectAsList();
                for (String s : predString) {
                    outWriter.write(s.replace("[", "").replace("]", "") + '\\n');
                };
                outWriter.close();
                System.out.println( "Predictions saved at: " + filePath );
            } catch (IOException e) {
                System.out.println( "Writing the predictions to csv file failed." );
                e.printStackTrace();
            }

            // training data as test data
            Dataset<Row> predTrainingAsTest = model.transform(dataframe);
            Dataset<Row> predSelectTrainingAsTest = predTrainingAsTest.select("classAtt", "prediction");
            try {
                predSelectTrainingAsTest = predTrainingAsTest.select("classAtt", "prediction", "probability");
            } catch (Exception e) {
                predSelectTrainingAsTest = predSelectTrainingAsTest.withColumn("prob_0", functions.lit(-1));
                predSelectTrainingAsTest = predSelectTrainingAsTest.withColumn("prob_1", functions.lit(-1));
                System.out.print('The prediction of the probabilities failed. Values set to default (-1).');
            }
            // create a csv file
            String filePathTrainingAsTest = "predictions/pred_<<<IDENTIFIER>>>_<<<NAME>>>_TrainingAsTest_" + iter + ".csv";
            try {
                File outFileTrainingAsTest = new File(filePathTrainingAsTest);
                outFileTrainingAsTest.createNewFile();
            } catch (IOException e) {
                System.out.println( "Creating the csv file failed." );
                e.printStackTrace();
            }
            // write in csv
            try {
                FileWriter outWriterTrainingAsTest = new FileWriter(filePathTrainingAsTest);
                // write header
                outWriterTrainingAsTest.write("actual,prediction,prob_0,prob_1\\n");
                // write predictions
                List<String> predStringTrainingAsTest = predSelectTrainingAsTest.map((MapFunction<Row, String>) row -> row.mkString(","), Encoders.STRING()).collectAsList();
                for (String s : predStringTrainingAsTest) {
                    outWriterTrainingAsTest.write(s.replace("[", "").replace("]", "") + '\\n');
                };
                outWriterTrainingAsTest.close();
                System.out.println( "Predictions saved at: " + filePathTrainingAsTest );
            } catch (IOException e) {
                System.out.println( "Writing the predictions to csv file failed." );
                e.printStackTrace();
            }
        }
    }

