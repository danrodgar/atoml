# Field:       name 
# Description: name of the test, should be unique (duplicate name within same package+framework will lead to problems)

# Field:       type
# Description: type of the algorithm
# Supported values:
#  - classification
#  - clustering
#  - (regression planned)

# Field:       framework
# Description: Machine learning framework that where the current algorithm is defined
# Supported values:
#  - weka
#  - spark
#  - sklearn

# Field:       package
# Description: package in which the algorithm is implemented

# Field:       class
# Description: name of the class that implements the algorithm

# Field:       features
# Description: defines which features can be used for the training with this algorithm, can be a list if multiple feature types are supported
# Supported values:
#  - DOUBLE          all double values (Java)
#  - FLOAT           all float values (Java)
#  - POSITIVEDOUBLE  positive double values (Java)
#  - POSITIVEFLOAT   positive float values (Java)
#  - UNIT            floating point numbers in [0,1]
#  - CATEGORICAL      categorical data

# Field:       properties
# Description: Defines which properties the algorithm should fulfill. 
# supported properties:
#  - same      re-train with the same data --> expect classes/scores to be the same
#  - scramble  re-train with randomly reordered instances --> expect classes/scores to be the same
#  - reorder   re-train with randomly reordered features --> expect classes/scores to be the same
#  - const     re-train with +1 added to all numeric features --> expect classes/scores to be the same
#  - opposite  re-train with all class labels flipped --> expect classes to be the same, scores inverted (1-priorScore)
#  - rotate    re-train with 90 degrees rotated data --> expect classes/scores to be same for distance-based classification
#  - rescale   re-train with all numeric values multiplied by 2 --> expect classes to be the same if initially linearly seperable
#  - clone     re-train with each instance duplicated --> expect classes/scores to be the same
# supported evaluations:
#  - score_exact scores must be exactly the same after re-training
#  - class_exact classifications must be exactly the same after re-training
#  - class_stat  classifications must not be significantly different from expectation after re-training (chi-squared test)
#  - score_stat  scores of distributionForInstance must not be significantly different from expectation after re-training (KS test)
#  - clust_exact clusters must be exactly the same after re-training
#  - clust_stat  clusters must not be significantly different from expectation after re-training (kolmogorov-smirnoff test)

# Field:       parameters
# Description: List of relevant hyper parameters of the algorithm.
#               Every parameter must specify a default value; the default value can be different from the default in the application
# Supported parameter types:
#  - double     double values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - integer    integer values; if min, max, and stepsize are defined these values will be tested together with the default values of all other parameters
#  - flag       flag that is either enabled or disabled; both will be tested with the default values of the other parameters
#  - fixedflag  a flag that is always used with the default value - probably only makes sense with the value enabled.
#  - values     list of values that will be tested with the default values of the other parameters
# Caret specific property: A parameter can carry the 'rparam.' prefix, e.g., 'rparam.num.trees'. This prefix signals
#               that the parameter is not a hyperparameter available in caret, but a parameter only available as
#               a keyword argument from the underlying package. These parameters do only support a default value.

#####################
# Caret Classifiers #
#####################

name: CARET_plr
type: classification
framework: caret
package: stepPlr
class: plr
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
parameters:
  lambda: # L2 Penalty
    type: double
    min: 0.1
    max: 1.9
    stepsize: 0.9
    default: 1.0
  cp: # Complexity Parameter
    type: values
    values: ["bic", "aic"]
    default: "bic"
---

name: CARET_knn
type: classification
framework: caret
package: caret
class: knn
features: [double,categorical]
properties:
  same: score_exact
  scramble: score_exact
  reorder: score_exact
  const: score_exact
  opposite: score_exact
  rotate: class_exact
  rescale: class_exact
  clone: class_exact
parameters:
  k: # number of neighbors
    type: integer
    min: 1
    max: 9
    stepsize: 4
    default: 5
---
